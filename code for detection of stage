from google.colab import drive
drive.mount('/content/gdrive')
%pwd
%cd gdrive/MyDrive/final
%pwd
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
from sklearn.datasets import load_files
from keras.utils import np_utils
import numpy as np
import pandas as pd
from glob import glob
from tensorflow.keras.preprocessing import image                  
from tqdm import tqdm

def path_to_tensor(img_path):
    # loads RGB image as PIL.Image.Image type
    img = image.load_img(img_path, target_size=(224, 224))
    # convert PIL.Image.Image type to 3D tensor with shape (224, 224, 3)
    x = image.img_to_array(img)
    # convert 3D tensor to 4D tensor with shape (1, 224, 224, 3) and return 4D tensor
    
    return np.expand_dims(x, axis=0)

def paths_to_tensor(img_paths):
    list_of_tensors = [path_to_tensor(img_path) for img_path in tqdm(img_paths)]
    return np.vstack(list_of_tensors)
import tensorflow as tf
from tensorflow.keras import layers

from tensorflow.keras.layers import Dense, Activation
import tensorflow_hub as hub

# Download the pretrained model and save it as a Keras layer
feature_extractor_layer = hub.KerasLayer("https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/5",
                                       trainable=False, # freeze the underlying patterns
                                       input_shape=(224,224,3)) # define the input image shape

model = tf.keras.Sequential([
    feature_extractor_layer, # use the feature extraction layer as the base
    layers.Dense(4, activation='softmax', name='output_layer') # create our own output layer      
  ])
from keras.optimizers import Adam, Adamax, RMSprop

#model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'],run_eagerly=True)
model.compile(loss='categorical_crossentropy', optimizer=Adamax(learning_rate=0.002), metrics=['accuracy'],run_eagerly=True)
#resnet_model.compile(loss='categorical_crossentropy', optimizer= RMSprop(learning_rate=0.002), metrics=['accuracy'])
model.load_weights('./test_01.hdf5')
plant_stage=['stage1','stage2','stage3','stage4']
import cv2
import matplotlib.pyplot as plt
def predict_stage(img_path):
    
    
    feature = path_to_tensor(img_path)/255
    
    # obtain predicted vector
    predicted_vector = model.predict(feature)
    
    # return dog breed that is predicted by the model
    df = pd.DataFrame(data={'predicted_vector': predicted_vector.reshape(-1), 'plant_disease_stage': plant_stage})
    
    df_sort=df.sort_values(['predicted_vector'], ascending=False)
    stage = plant_stage[np.argmax(predicted_vector)]
    img = cv2.imread(img_path)
    cv_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    imgplot = plt.imshow(cv_rgb)
    
    return print("The disease stage of the plant is  {}\n Plant disease stage are:\n ".format(stage)+df_sort.head(n=5).to_string(index=False))
predict_stage('./image3.JPG')
predict_stage('./img2.jpeg')
predict_stage('./img2.jpeg')
